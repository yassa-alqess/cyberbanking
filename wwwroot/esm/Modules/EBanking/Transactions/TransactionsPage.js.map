{
  "version": 3,
  "sources": ["../../../../../Modules/EBanking/Transactions/TransactionsPage.ts", "../../../../../Modules/EBanking/Transactions/TransactionsGrid.ts", "../../../../../Modules/EBanking/Transactions/TransactionsDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { TransactionsGrid } from './TransactionsGrid';\r\n\r\nexport default function pageInit() {\n    initFullHeightGridPage(new TransactionsGrid($('#GridDiv')).element);\n}", "import { Decorators, EntityGrid, QuickSearchField } from '@serenity-is/corelib';\r\nimport { PermissionKeys, TransactionsColumns, TransactionsRow, TransactionsService } from '@/ServerTypes/EBanking';\r\nimport { TransactionsDialog } from './TransactionsDialog';\r\nimport { Authorization, indexOf, text, first, tryFirst, } from '@serenity-is/corelib/q';\r\nimport { UserRow } from '../../Administration';\r\n\r\n@Decorators.registerClass('cyberbanking.EBanking.TransactionsGrid')\nexport class TransactionsGrid extends EntityGrid<TransactionsRow, any> {\n    protected getColumnsKey() { return TransactionsColumns.columnsKey; }\n    protected getDialogType() { return TransactionsDialog; }\n    protected getRowDefinition() { return TransactionsRow; }\n    protected getService() { return TransactionsService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n    protected getQuickFilters() {\r\n        let filters = super.getQuickFilters();\r\n        if (!Authorization.hasPermission(PermissionKeys.Security))\r\n            filters.splice(indexOf(filters, x => x.field == TransactionsRow.Fields.ReceiverAccountId), 1);\n\n\n        //delete admin as he is not allowed to transfer money\n        const adminId = tryFirst(UserRow.getLookup().items, x => x.Username === \"admin\")?.UserId.toString();\n        if(adminId)\n            UserRow.getLookup().items.splice(indexOf(UserRow.getLookup().items, x => x.UserId.toString() === adminId), 1);\n\n        return filters;\r\n    }\n    protected getQuickSearchFields(): QuickSearchField[] {\r\n        const fld = TransactionsRow.Fields;\r\n        const txt = (s) =>\r\n            text(`Db.${TransactionsRow.localTextPrefix}.${s}`).toLowerCase();\r\n        return [\r\n            { name: \"\", title: \"all\" },\r\n            { name: fld.Description, title: txt(fld.Description) },\r\n            { name: fld.Amount, title: txt(fld.Amount) },\r\n        ];\r\n    }\n    protected getButtons() {\n        let buttons = super.getButtons();\n        if (Authorization.hasPermission(PermissionKeys.Security)) {\n            //delete add button\n            //buttons.splice(indexOf(buttons, x => x.title == \"add\"), 1);\n            // buttons.splice(0, 1);\n        }\n        return buttons;\n    }\n    protected getColumns() {\r\n        const cols = super.getColumns();\r\n        const senderCol = first(cols, x => x.field == TransactionsRow.Fields.SenderAccountId);\n        if (Authorization.hasPermission(PermissionKeys.Security))\r\n            senderCol.visible = true;\r\n        return cols;\r\n    }\n}", "import { Decorators, EditorUtils, EntityDialog } from '@serenity-is/corelib';\r\nimport { TransactionsForm, TransactionsRow, TransactionsService, TransactionType } from '@/ServerTypes/EBanking';\r\nimport { first, indexOf, toId, tryFirst } from '@serenity-is/corelib/q';\nimport { Authorization, notifyError } from '@serenity-is/corelib/q';\r\nimport { UserRow } from '../../ServerTypes/Administration/UserRow';\r\nimport { UserService } from '../../Administration';\r\n\r\n@Decorators.registerClass('cyberbanking.EBanking.TransactionsDialog')\nexport class TransactionsDialog extends EntityDialog<TransactionsRow, any> {\n    protected getFormKey() { return TransactionsForm.formKey; }\n    protected getRowDefinition() { return TransactionsRow; }\n    protected getService() { return TransactionsService.baseUrl; }\n\n    protected form = new TransactionsForm(this.idPrefix);\n\n    protected afterLoadEntity() {\r\n        super.afterLoadEntity();\r\n        this.form.TransactionType.changeSelect2(e => {\n            const type = toId(this.form.TransactionType.value);\n            this.form.ReceiverAccountId.getGridField().toggle(type === TransactionType.Transfer);\n        })\n\n        // deleting the admin is handled at the Grid, I removed those itmes from the lookup itself\n        const currentUserId = tryFirst(UserRow.getLookup().items, x => x.Username === Authorization.username)?.UserId.toString();\n        const adminId = tryFirst(UserRow.getLookup().items, x => x.Username === \"admin\")?.UserId.toString();\n        if (currentUserId !== adminId)\n            this.form.ReceiverAccountId.items.splice(indexOf(this.form.ReceiverAccountId.items, x => x.id === currentUserId), 1);\n    \n    }\n    \n    protected updateInterface() {\r\n        super.updateInterface();\n        if (this.isEditMode()) {\r\n            EditorUtils.setReadOnly(this.form.ReceiverAccountId, true);\n            EditorUtils.setReadOnly(this.form.TransactionType, true);\n            EditorUtils.setReadOnly(this.form.Amount, true);\n            EditorUtils.setReadOnly(this.form.Description, true);\n            this.deleteButton.hide();\n            this.applyChangesButton.hide();\n            this.saveAndCloseButton.hide();\n        }\n    }\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_corelib", "import_q", "TransactionsDialog", "TransactionsForm", "TransactionsRow", "TransactionsService", "_a", "_b", "e", "type", "currentUserId", "UserRow", "x", "adminId", "__name", "__decorateClass", "import_q", "TransactionsGrid", "TransactionsColumns", "TransactionsDialog", "TransactionsRow", "TransactionsService", "container", "_a", "filters", "PermissionKeys", "x", "adminId", "UserRow", "fld", "txt", "__name", "s", "buttons", "cols", "senderCol", "__decorateClass", "pageInit", "TransactionsGrid", "__name"]
}

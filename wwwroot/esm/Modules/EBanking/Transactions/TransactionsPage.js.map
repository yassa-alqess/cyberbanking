{
  "version": 3,
  "sources": ["../../../../../Modules/EBanking/Transactions/TransactionsPage.ts", "../../../../../Modules/EBanking/Transactions/TransactionsGrid.ts", "../../../../../Modules/EBanking/Transactions/TransactionsDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { TransactionsGrid } from './TransactionsGrid';\r\n\r\nexport default function pageInit() {\n    initFullHeightGridPage(new TransactionsGrid($('#GridDiv')).element);\n}", "import { Decorators, EntityGrid, LookupEditor, QuickSearchField } from '@serenity-is/corelib';\r\nimport { AccountsRow, AccountsService, PermissionKeys, TransactionsColumns, TransactionsRow, TransactionsService, TransactionType } from '@/ServerTypes/EBanking';\r\nimport { TransactionsDialog } from './TransactionsDialog';\r\nimport { Authorization, indexOf, text, first, tryFirst, toId, ListRequest, } from '@serenity-is/corelib/q';\r\nimport { UserRow } from '../../Administration';\r\n\r\n@Decorators.registerClass('cyberbanking.EBanking.TransactionsGrid')\nexport class TransactionsGrid extends EntityGrid<TransactionsRow, any> {\n    protected getColumnsKey() { return TransactionsColumns.columnsKey; }\n    protected getDialogType() { return TransactionsDialog; }\n    protected getRowDefinition() { return TransactionsRow; }\n    protected getService() { return TransactionsService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n    protected getQuickFilters() {\r\n        let filters = super.getQuickFilters();\r\n        if (!Authorization.hasPermission(PermissionKeys.Security))\r\n            filters.splice(indexOf(filters, x => x.field == TransactionsRow.Fields.SenderAccountId), 1);\n\n        /*\n        * Hide receiver filter if transaction type is not transfer\n        const receiverFilter = first(filters, x => x.field == TransactionsRow.Fields.ReceiverAccountId);\n        const transactionTypeFilter = first(filters, x => x.field == TransactionsRow.Fields.TransactionType);\n        this.changeSelect2(e => {\n            const type = parseInt(e.val);\n            console.log(e);\n            if (type != TransactionType.Transfer) {\n                console.log(\"adding receiver filter\");\n                filters.splice(indexOf(filters, x => x.field == TransactionsRow.Fields.ReceiverAccountId), 1);\n            }\n            else {\n                filters.splice(indexOf(filters, x => x.field == TransactionsRow.Fields.ReceiverAccountId), 1);\n                filters.push(receiverFilter);\n            }\n\n        })\n        */\n\n\n\n         //delete admin as he is not allowed to transfer money neither has accounts,\n        //also here i'm removing the current user, giving that he can't transfer for some other arbitary account owned by him.\n        //it may be a feature to be added later.\n        const adminId = tryFirst(UserRow.getLookup()?.items, x => x.Username === \"admin\")?.UserId;\n        const currentUserId = tryFirst(UserRow.getLookup().items, x => x.Username === Authorization.username)?.UserId;\n        if (adminId)\n            UserRow.getLookup()?.items.splice(indexOf(UserRow.getLookup()?.items, x => x.UserId === adminId), 1);\n        if (currentUserId !== adminId)\n            UserRow.getLookup()?.items.splice(indexOf(UserRow.getLookup()?.items, x => x.UserId === currentUserId), 1);\n\n\n        //not working yet\n        const receiverFilter = first(filters, x => x.field == TransactionsRow.Fields.ReceiverAccountId);\r\n        receiverFilter.handler = h => {\r\n            const request = (h.request as ListRequest);\r\n            const values = (h.widget as LookupEditor).values;\n            values[0] = AccountsRow.getLookup()?.items.filter(x => x.CustomerId === parseInt(values[0])).map(x => x.AccountId).toString();\n    \n            h.handled = false;\r\n        };\n        return filters;\r\n    }\n    protected getQuickSearchFields(): QuickSearchField[] {\r\n        const fld = TransactionsRow.Fields;\r\n        const txt = (s) =>\r\n            text(`Db.${TransactionsRow.localTextPrefix}.${s}`).toLowerCase();\r\n        return [\r\n            { name: \"\", title: \"all\" },\r\n            { name: fld.Description, title: txt(fld.Description) },\r\n            { name: fld.Amount, title: txt(fld.Amount) },\r\n        ];\r\n    }\n    protected getButtons() {\n        let buttons = super.getButtons();\n        if (Authorization.hasPermission(PermissionKeys.Security)) {\n            //delete add button for admin\n            //buttons.splice(indexOf(buttons, x => x.title == \"add\"), 1);\n            buttons.splice(0, 1);\n        }\n        return buttons;\n    }\n    protected getColumns() {\r\n        const cols = super.getColumns();\r\n        const senderCol = first(cols, x => x.field == TransactionsRow.Fields.SenderAccountId);\n        //const senderTypeCol = first(cols, x => x.field == TransactionsRow.Fields.SenderAccountType);\n        if (!Authorization.hasPermission(PermissionKeys.Security)) {\r\n            senderCol.visible = false;\n            //senderTypeCol.visible = false;\n        }\r\n        return cols;\r\n    }\n}", "import { Decorators, EditorUtils, EntityDialog } from '@serenity-is/corelib';\r\nimport { AccountsRow, AccountsService, TransactionsForm, TransactionsRow, TransactionsService, TransactionType } from '@/ServerTypes/EBanking';\r\nimport { first, indexOf, toId, tryFirst } from '@serenity-is/corelib/q';\nimport { Authorization, notifyError } from '@serenity-is/corelib/q';\r\nimport { UserRow } from '../../ServerTypes/Administration/UserRow';\r\nimport { UserService } from '../../Administration';\r\n\r\n@Decorators.registerClass('cyberbanking.EBanking.TransactionsDialog')\nexport class TransactionsDialog extends EntityDialog<TransactionsRow, any> {\n    protected getFormKey() { return TransactionsForm.formKey; }\n    protected getRowDefinition() { return TransactionsRow; }\n    protected getService() { return TransactionsService.baseUrl; }\n\n    protected form = new TransactionsForm(this.idPrefix);\n    private senderAccounts: Array<AccountsRow>;\n    private receiverAccounts: Array<AccountsRow>;\n    private receiverUsername: string;\n\n    protected beforeLoadEntity() {\n        super.beforeLoadEntity(this.entity);\n\n\n        // only get account types for dropdown that current user has and receiver user has\n        AccountsService.List({}, response => {\n            this.senderAccounts = response.Entities;\n            let newItems = this.form.SenderAccountType.items.filter(x => this.senderAccounts.find(y => y.AccountType === parseInt(x.id)));\n            this.form.SenderAccountType.items = newItems;\n            //console.log(\"before\", newItems);\n        });\n\n        AccountsService.ListByUsername({ Username: Authorization.username }, response => {\n            this.receiverAccounts = response.Entities;\n            let newItems = this.form.ReceiverAccountType.items.filter(x => this.receiverAccounts.find(y => y.AccountType === parseInt(x.id)));\n            this.form.ReceiverAccountType.items = newItems;\n            //console.log(\"before\", newItems);\n        });\n\n\n    }\n    protected afterLoadEntity() {\r\n        super.afterLoadEntity();\r\n        this.form.TransactionType.changeSelect2(e => {\n            const type = toId(this.form.TransactionType.value);\n            this.form.ReceiverAccountId.getGridField().toggle(type === TransactionType.Transfer);\n            this.form.ReceiverAccountType.getGridField().toggle(type === TransactionType.Transfer);\n        })\n        this.form.ReceiverAccountId.changeSelect2(e => {\n            const receiverAccountId = toId(this.form.ReceiverAccountId.value);\n            let receiverAccountTypes;\n            AccountsService.ListById({\n                Id: receiverAccountId\n            }, response => {\n                this.receiverAccounts = response.Entities;\n                //console.log(this.receiverAccounts);\n                let newItems = this.form.ReceiverAccountType.items.filter(x => this.receiverAccounts.find(y => y.AccountType === parseInt(x.id)));\n                console.log(newItems);\n                this.form.ReceiverAccountType.items = newItems;\n            });\n       })\n\n    \n        //handled at both grid and dialog to preserve integrity of data.\n        //but if deleted currentuser will be -1\n        const currentUserId = tryFirst(UserRow.getLookup()?.items, x => x.Username === Authorization.username)?.UserId;\n        const adminId = tryFirst(UserRow.getLookup()?.items, x => x.Username === \"admin\")?.UserId;\n        if (currentUserId !== adminId && currentUserId != -1)\n            this.form.ReceiverAccountId.items.splice(indexOf(this.form.ReceiverAccountId.items, x => x.id === currentUserId.toString()), 1);\n        \n           \n    }\n\n    protected updateInterface() {\r\n        super.updateInterface();\n        if (this.isEditMode()) {\r\n            EditorUtils.setReadOnly(this.form.TransactionType, true);\n            EditorUtils.setReadOnly(this.form.Amount, true);\n            EditorUtils.setReadOnly(this.form.Description, true);\n            EditorUtils.setReadOnly(this.form.SenderAccountId, true);\n            EditorUtils.setReadOnly(this.form.SenderAccountType, true);\n            EditorUtils.setReadOnly(this.form.ReceiverAccountId, true);\n            EditorUtils.setReadOnly(this.form.ReceiverAccountType, true);\n            this.deleteButton.hide();\n            this.applyChangesButton.hide();\n            this.saveAndCloseButton.hide();\n        }\n    }\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_corelib", "import_q", "TransactionsDialog", "TransactionsForm", "TransactionsRow", "TransactionsService", "AccountsService", "response", "newItems", "x", "y", "_a", "_b", "_c", "_d", "e", "type", "receiverAccountId", "receiverAccountTypes", "currentUserId", "UserRow", "adminId", "__name", "__decorateClass", "import_q", "TransactionsGrid", "TransactionsColumns", "TransactionsDialog", "TransactionsRow", "TransactionsService", "container", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "filters", "PermissionKeys", "x", "adminId", "UserRow", "currentUserId", "receiverFilter", "h", "request", "values", "AccountsRow", "fld", "txt", "__name", "s", "buttons", "cols", "senderCol", "__decorateClass", "pageInit", "TransactionsGrid", "__name"]
}

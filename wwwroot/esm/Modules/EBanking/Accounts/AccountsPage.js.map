{
  "version": 3,
  "sources": ["../../../../../Modules/EBanking/Accounts/AccountsPage.ts", "../../../../../Modules/EBanking/Accounts/AccountsGrid.ts", "../../../../../Modules/EBanking/Accounts/AccountsDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { AccountsGrid } from './AccountsGrid';\r\n\r\nexport default function pageInit() {\n    initFullHeightGridPage(new AccountsGrid($('#GridDiv')).element);\n}", "import { Decorators, EntityGrid } from '@serenity-is/corelib';\r\nimport { AccountsColumns, AccountsRow, AccountsService, PermissionKeys } from '@/ServerTypes/EBanking';\r\nimport { AccountsDialog } from './AccountsDialog';\r\nimport { Authorization, indexOf, first, tryFirst } from '@serenity-is/corelib/q';\r\nimport { UserRow } from '../../Administration';\r\n\r\n@Decorators.registerClass('cyberbanking.EBanking.AccountsGrid')\nexport class AccountsGrid extends EntityGrid<AccountsRow, any> {\n    protected getColumnsKey() { return AccountsColumns.columnsKey; }\n    protected getDialogType() { return AccountsDialog; }\n    protected getRowDefinition() { return AccountsRow; }\n    protected getService() { return AccountsService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n    protected getButtons() {\n        let buttons = super.getButtons();\n        if (Authorization.hasPermission(PermissionKeys.Security)) {\n            //delete add button\n            //buttons.splice(indexOf(buttons, x => x.title == \"add\"), 1);\n           // buttons.splice(0, 1);\n        }\n        return buttons;\n    }\n    protected getColumns() {\r\n        const cols = super.getColumns();\r\n        const CustomerUsernameCol = first(cols, x => x.field == AccountsRow.Fields.CustomerUsername)\r\n        if (Authorization.hasPermission(PermissionKeys.Security))\r\n            CustomerUsernameCol.visible = true;\r\n        return cols;\r\n    }   \n    protected getQuickFilters() {\r\n        let filters = super.getQuickFilters();\r\n        if (!Authorization.hasPermission(PermissionKeys.Security))\r\n            filters.splice(indexOf(filters, x => x.field == AccountsRow.Fields.CustomerUsername), 1);\r\n\n        //delete admin as he is not allowed to transfer money, \n        const adminId = tryFirst(UserRow.getLookup().items, x => x.Username === \"admin\")?.UserId.toString();\n        if(adminId)\n            UserRow.getLookup().items.splice(indexOf(UserRow.getLookup().items, x => x.UserId.toString() === adminId), 1);\n\n        return filters;\r\n    }\n}", "import { Decorators, EditorUtils, EntityDialog } from '@serenity-is/corelib';\r\nimport { AccountsForm, AccountsRow, AccountsService } from '@/ServerTypes/EBanking';\r\n\r\n@Decorators.registerClass('cyberbanking.EBanking.AccountsDialog')\nexport class AccountsDialog extends EntityDialog<AccountsRow, any> {\n    protected getFormKey() { return AccountsForm.formKey; }\n    protected getRowDefinition() { return AccountsRow; }\n    protected getService() { return AccountsService.baseUrl; }\n\n    protected form = new AccountsForm(this.idPrefix);\n\n    //not working\n    protected getToolbarButtons() {\n        let buttons = super.getToolbarButtons();\n        if (this.entity && this.entity.AccountId) {\n            buttons.forEach(btn => {\n                btn.visible = false;\n            });\n        }\n        return buttons;\n    }\n    protected updateInterface() {\r\n        super.updateInterface();\n        if (this.isEditMode()) {\r\n            EditorUtils.setReadOnly(this.form.Balance, true);\n            EditorUtils.setReadOnly(this.form.AccountType, true);\n            EditorUtils.setReadOnly(this.form.OpenDate, true);\n            EditorUtils.setReadOnly(this.form.CustomerId, true);\n            this.deleteButton.hide();\n            this.applyChangesButton.hide();\n            this.saveAndCloseButton.hide();\r\n        }\n    }\n\n}"],
  "mappings": "wNAAC,IAAAA,EAAuC,SCAxC,IAAAC,EAAuC,SCAvC,IAAAC,EAAsD,SAI/C,IAAMC,EAAN,cAA6B,cAA+B,CAA5D,kCAKH,KAAU,KAAO,IAAIC,EAAa,KAAK,QAAQ,EAJrC,YAAa,CAAE,OAAOA,EAAa,OAAS,CAC5C,kBAAmB,CAAE,OAAOC,CAAa,CACzC,YAAa,CAAE,OAAOC,EAAgB,OAAS,CAK/C,mBAAoB,CAC1B,IAAIC,EAAU,MAAM,kBAAkB,EACtC,OAAI,KAAK,QAAU,KAAK,OAAO,WAC3BA,EAAQ,QAAQC,GAAO,CACnBA,EAAI,QAAU,EAClB,CAAC,EAEED,CACX,CACU,iBAAkB,CACxB,MAAM,gBAAgB,EAClB,KAAK,WAAW,IAChB,cAAY,YAAY,KAAK,KAAK,QAAS,EAAI,EAC/C,cAAY,YAAY,KAAK,KAAK,YAAa,EAAI,EACnD,cAAY,YAAY,KAAK,KAAK,SAAU,EAAI,EAChD,cAAY,YAAY,KAAK,KAAK,WAAY,EAAI,EAClD,KAAK,aAAa,KAAK,EACvB,KAAK,mBAAmB,KAAK,EAC7B,KAAK,mBAAmB,KAAK,EAErC,CAEJ,EA9BaE,EAAAN,EAAA,kBAAAA,EAANO,EAAA,CADN,aAAW,cAAc,sCAAsC,GACnDP,GDDb,IAAAQ,EAAwD,SAIjD,IAAMC,EAAN,cAA2B,YAA6B,CACjD,eAAgB,CAAE,OAAOC,EAAgB,UAAY,CACrD,eAAgB,CAAE,OAAOC,CAAgB,CACzC,kBAAmB,CAAE,OAAOC,CAAa,CACzC,YAAa,CAAE,OAAOC,EAAgB,OAAS,CAEzD,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,CACnB,CACU,YAAa,CACnB,IAAIC,EAAU,MAAM,WAAW,EAC/B,OAAI,gBAAc,cAAcC,EAAe,QAAQ,EAKhDD,CACX,CACU,YAAa,CACnB,IAAME,EAAO,MAAM,WAAW,EACxBC,KAAsB,SAAMD,EAAME,GAAKA,EAAE,OAASP,EAAY,OAAO,gBAAgB,EAC3F,OAAI,gBAAc,cAAcI,EAAe,QAAQ,IACnDE,EAAoB,QAAU,IAC3BD,CACX,CACU,iBAAkB,CAhChC,IAAAG,EAiCQ,IAAIC,EAAU,MAAM,gBAAgB,EAC/B,gBAAc,cAAcL,EAAe,QAAQ,GACpDK,EAAQ,UAAO,WAAQA,EAASF,GAAKA,EAAE,OAASP,EAAY,OAAO,gBAAgB,EAAG,CAAC,EAG3F,IAAMU,GAAUF,KAAA,YAASG,EAAQ,UAAU,EAAE,MAAOJ,GAAKA,EAAE,WAAa,OAAO,IAA/D,YAAAC,EAAkE,OAAO,WACzF,OAAGE,GACCC,EAAQ,UAAU,EAAE,MAAM,UAAO,WAAQA,EAAQ,UAAU,EAAE,MAAOJ,GAAKA,EAAE,OAAO,SAAS,IAAMG,CAAO,EAAG,CAAC,EAEzGD,CACX,CACJ,EArCaG,EAAAf,EAAA,gBAAAA,EAANgB,EAAA,CADN,aAAW,cAAc,oCAAoC,GACjDhB,GDJE,SAARiB,GAA4B,IAC/B,0BAAuB,IAAIC,EAAa,EAAE,UAAU,CAAC,EAAE,OAAO,CAClE,CAFwBC,EAAAF,EAAA",
  "names": ["import_q", "import_corelib", "import_corelib", "AccountsDialog", "AccountsForm", "AccountsRow", "AccountsService", "buttons", "btn", "__name", "__decorateClass", "import_q", "AccountsGrid", "AccountsColumns", "AccountsDialog", "AccountsRow", "AccountsService", "container", "buttons", "PermissionKeys", "cols", "CustomerUsernameCol", "x", "_a", "filters", "adminId", "UserRow", "__name", "__decorateClass", "pageInit", "AccountsGrid", "__name"]
}

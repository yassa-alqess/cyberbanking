{
  "version": 3,
  "sources": ["external-global:Serenity.Extensions", "../../../../../Modules/EBanking/Accounts/AccountsPage.ts", "../../../../../Modules/EBanking/Accounts/AccountsGrid.ts", "../../../../../Modules/EBanking/Accounts/AccountsDialog.ts"],
  "sourcesContent": ["module.exports = Serenity.Extensions;", "\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { AccountsGrid } from './AccountsGrid';\r\n\r\nexport default function pageInit() {\n    initFullHeightGridPage(new AccountsGrid($('#GridDiv')).element);\n}", "import { Decorators, EntityGrid, GridRowSelectionMixin } from '@serenity-is/corelib';\r\nimport { AccountsColumns, AccountsRow, AccountsService, PermissionKeys } from '@/ServerTypes/EBanking';\r\nimport { AccountsDialog } from './AccountsDialog';\r\nimport { Authorization, indexOf, first, tryFirst, parseInteger, notifyError } from '@serenity-is/corelib/q';\r\nimport { UserRow } from '../../Administration';\r\nimport { BulkServiceAction } from '@serenity-is/extensions';\r\n\r\n@Decorators.registerClass('cyberbanking.EBanking.AccountsGrid')\nexport class AccountsGrid extends EntityGrid<AccountsRow, any> {\n    protected getColumnsKey() { return AccountsColumns.columnsKey; }\n    protected getDialogType() { return AccountsDialog; }\n    protected getRowDefinition() { return AccountsRow; }\n    protected getService() { return AccountsService.baseUrl; }\n    private rowSelection: GridRowSelectionMixin;\r\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n    protected createToolbarExtensions() {\r\n        super.createToolbarExtensions();\r\n        if (Authorization.hasPermission(PermissionKeys.Security))\r\n            this.rowSelection = new GridRowSelectionMixin(this);\r\n    }\n    protected getButtons() {\n        let buttons = super.getButtons();\n        if (Authorization.hasPermission(PermissionKeys.Security)) {\n            //delete add button for admin\n            //add deactivate btn for admin\n            //buttons.splice(indexOf(buttons, x => x.title == \"add\"), 1);\n            buttons.splice(0, 1);\n            buttons.push({\r\n                title: 'Activate Accounts',\r\n                icon: 'fa fa-check',\r\n                visible: true,\r\n                cssClass: 'add-button',\r\n                onClick: e => {\r\n                    //   debugger;\r\n                    let accountIds = this.rowSelection.getSelectedKeys();\r\n                    if (accountIds.length > 0) {\r\n                        var action = new ActivateBulkAction();\r\n                        action.done = () => this.rowSelection.resetCheckedAndRefresh();\r\n                        action.execute(accountIds);\r\n                    } else notifyError('Please Select Rows to submit');\r\n                }\r\n            });\n            buttons.push({\r\n                title: 'Deactivate Accounts',\r\n                icon: 'fa fa-ban',\r\n                visible: true,\r\n                cssClass: 'delete-button',\r\n                onClick: e => {\r\n                    //   debugger;\r\n                    let accountIds = this.rowSelection.getSelectedKeys();\r\n                    if (accountIds.length > 0) {\r\n                        var action = new DeactivateBulkAction();\r\n                        action.done = () => this.rowSelection.resetCheckedAndRefresh();\r\n                        action.execute(accountIds);\r\n                    } else notifyError('Please Select Rows to submit');\r\n                }\r\n            });\n\n\n        }\n        return buttons;\n    }\n    protected getColumns() {\r\n        const cols = super.getColumns();\r\n        const CustomerUsernameCol = first(cols, x => x.field == AccountsRow.Fields.CustomerUsername)\r\n        if (Authorization.hasPermission(PermissionKeys.Security)) {\n            cols.splice(0, 0, GridRowSelectionMixin.createSelectColumn(() => this.rowSelection));\r\n            CustomerUsernameCol.visible = true;\r\n        }\n        return cols;\r\n    }\n    protected usePager() {\r\n        return true; //use pagination\r\n    }\n    protected getQuickFilters() {\r\n        let filters = super.getQuickFilters();\r\n        if (!Authorization.hasPermission(PermissionKeys.Security))\r\n            filters.splice(indexOf(filters, x => x.field == AccountsRow.Fields.CustomerUsername), 1);\r\n\n        //delete admin as he is not allowed to transfer money, \n        const adminId = tryFirst(UserRow.getLookup()?.items, x => x.Username === \"admin\")?.UserId.toString();\n        if(adminId)\n            UserRow.getLookup()?.items.splice(indexOf(UserRow.getLookup().items, x => x.UserId.toString() === adminId), 1);\n\n        return filters;\r\n    }\n}\n\n@Decorators.registerClass('cyberbanking.EBanking.DeleteBulkAction')\r\nexport class DeactivateBulkAction extends BulkServiceAction {\r\n\r\n\n    protected getParallelRequests() {\r\n        return 10;\r\n    }\r\n\r\n    protected getBatchSize() {\r\n        return 5;\r\n    }\r\n\r\n    protected sccss() {\r\n        alert('sccss');\r\n        debugger;\r\n    }\r\n    protected executeForBatch(batch) {\r\n\r\n        AccountsService.DeactivateList(\r\n            {\r\n                AccountIds: batch.map(x => parseInteger(x))\r\n            },\r\n            response => {\r\n                this.set_successCount(this.get_successCount() + batch.length)\r\n            },\r\n            {\r\n                blockUI: false,\r\n                onError: response => this.set_errorCount(this.get_errorCount() + batch.length),\r\n                onCleanup: () => this.serviceCallCleanup(),\r\n            });\r\n\r\n    }\r\n}\n\nexport class ActivateBulkAction extends BulkServiceAction {\r\n\r\n\n    protected getParallelRequests() {\r\n        return 10;\r\n    }\r\n\r\n    protected getBatchSize() {\r\n        return 5;\r\n    }\r\n\r\n    protected sccss() {\r\n        alert('sccss');\r\n        debugger;\r\n    }\r\n    protected executeForBatch(batch) {\r\n\r\n        AccountsService.ActivateList(\r\n            {\r\n                AccountIds: batch.map(x => parseInteger(x))\r\n            },\r\n            response => {\r\n                this.set_successCount(this.get_successCount() + batch.length)\r\n            },\r\n            {\r\n                blockUI: false,\r\n                onError: response => this.set_errorCount(this.get_errorCount() + batch.length),\r\n                onCleanup: () => this.serviceCallCleanup(),\r\n            });\r\n\r\n    }\r\n}", "import { Decorators, EditorUtils, EntityDialog } from '@serenity-is/corelib';\r\nimport { AccountsForm, AccountsRow, AccountsService } from '@/ServerTypes/EBanking';\r\n\r\n@Decorators.registerClass('cyberbanking.EBanking.AccountsDialog')\nexport class AccountsDialog extends EntityDialog<AccountsRow, any> {\n    protected getFormKey() { return AccountsForm.formKey; }\n    protected getRowDefinition() { return AccountsRow; }\n    protected getService() { return AccountsService.baseUrl; }\n\n    protected form = new AccountsForm(this.idPrefix);\n\n    //not working\n    protected getToolbarButtons() {\n        let buttons = super.getToolbarButtons();\n        if (this.entity && this.entity.AccountId) {\n            buttons.forEach(btn => {\n                btn.visible = false;\n            });\n        }\n        return buttons;\n    }\n    protected updateInterface() {\r\n        super.updateInterface();\n        if (this.isEditMode()) {\r\n            EditorUtils.setReadOnly(this.form.Balance, true);\n            EditorUtils.setReadOnly(this.form.AccountType, true);\n            EditorUtils.setReadOnly(this.form.OpenDate, true);\n            EditorUtils.setReadOnly(this.form.CustomerId, true);\n            this.deleteButton.hide();\n            this.applyChangesButton.hide();\n            this.saveAndCloseButton.hide();\r\n        }\n    }\n\n}"],
  "mappings": "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",
  "names": ["require_Serenity", "__commonJSMin", "exports", "module", "import_q", "import_corelib", "import_corelib", "AccountsDialog", "AccountsForm", "AccountsRow", "AccountsService", "buttons", "btn", "__name", "__decorateClass", "import_q", "import_extensions", "AccountsGrid", "container", "AccountsColumns", "AccountsDialog", "AccountsRow", "AccountsService", "PermissionKeys", "buttons", "e", "accountIds", "action", "ActivateBulkAction", "DeactivateBulkAction", "cols", "CustomerUsernameCol", "x", "_a", "_b", "_c", "filters", "adminId", "UserRow", "__name", "__decorateClass", "batch", "response", "pageInit", "AccountsGrid", "__name"]
}

{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/EBanking/Accounts.AccountType.ts", "../../../Modules/ServerTypes/EBanking/AccountsColumns.ts", "../../../Modules/ServerTypes/EBanking/AccountsRow.ts", "../../../Modules/ServerTypes/EBanking/AccountsService.ts", "../../../Modules/ServerTypes/EBanking/PermissionKeys.ts", "../../../Modules/ServerTypes/EBanking/Transactions.TransactionType.ts", "../../../Modules/EBanking/Transactions/TransactionListFormatter.ts", "../../../Modules/ServerTypes/EBanking/TransactionsColumns.ts", "../../../Modules/ServerTypes/EBanking/TransactionsRow.ts", "../../../Modules/ServerTypes/EBanking/TransactionsService.ts", "../../../Modules/ServerTypes/EBanking/AccountsForm.ts", "../../../Modules/ServerTypes/EBanking/TransactionsForm.ts"],
  "sourcesContent": ["\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum AccountType {\n    Savings = 1,\n    Checking = 2,\n    CreditCard = 3,\n    Loan = 4\n}\nDecorators.registerEnumType(AccountType, 'cyberbanking.EBanking.Accounts.AccountType', 'EBanking.AccountType');", "\uFEFFimport { AccountType } from \"./Accounts.AccountType\";\n\nexport class AccountsColumns {\n    static columnsKey = 'EBanking.Accounts';\n}\n\n[AccountType]; // referenced types", "\uFEFFimport { AccountType } from \"./Accounts.AccountType\";\nimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface AccountsRow {\n    AccountId?: number;\n    Balance?: number;\n    AccountType?: AccountType;\n    OpenDate?: string;\n    CustomerId?: number;\n    CustomerUsername?: string;\n    IsActive?: boolean;\n}\n\nexport abstract class AccountsRow {\n    static readonly idProperty = 'AccountId';\n    static readonly localTextPrefix = 'EBanking.Accounts';\n    static readonly deletePermission = 'EBanking:Accounts';\n    static readonly insertPermission = 'EBanking:Accounts';\n    static readonly readPermission = 'EBanking:Accounts';\n    static readonly updatePermission = 'EBanking:Accounts';\n\n    static readonly Fields = fieldsProxy<AccountsRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { AccountsRow } from \"./AccountsRow\";\n\nexport namespace AccountsService {\n    export const baseUrl = 'EBanking/Accounts';\n\n    export declare function Create(request: SaveRequest<AccountsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<AccountsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<AccountsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"EBanking/Accounts/Create\",\n        Retrieve: \"EBanking/Accounts/Retrieve\",\n        List: \"EBanking/Accounts/List\"\n    } as const;\n\n    [\n        'Create', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>AccountsService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport namespace PermissionKeys {\n    export const Security = \"Administration:Security\";\n    export const Accounts = \"EBanking:Accounts\";\n    export const Transactions = \"EBanking:Transactions\";\n}", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum TransactionType {\n    Deposit = 1,\n    Withdrawal = 2,\n    Transfer = 3\n}\nDecorators.registerEnumType(TransactionType, 'cyberbanking.EBanking.Transactions.TransactionType', 'EBanking.TransactionType');", "import { Decorators, Formatter } from \"@serenity-is/corelib\";\r\nimport { htmlEncode } from \"@serenity-is/corelib/q\";\r\nimport { FormatterContext } from \"@serenity-is/sleekgrid\";\r\nimport { AccountsRow } from \"../../ServerTypes/EBanking/AccountsRow\";\nimport { UserRow } from \"../../ServerTypes/Administration/UserRow\";\r\n\r\n@Decorators.registerFormatter(\"cyberbanking.EBanking.TransactionListFormatter\")\r\nexport class TransactionListFormatter implements Formatter {\r\n    format(ctx: FormatterContext) {\r\n        let id = ctx.value\n        if (!id)\r\n            return \"\";\r\n\r\n        let byId = UserRow.getLookup()?.itemById; //why depricated\r\n        let g = byId[id];\r\n        if (!g)\r\n            return id.toString();\r\n        return htmlEncode(g.Username);\r\n    }\r\n}", "\uFEFFimport { TransactionType } from \"./Transactions.TransactionType\";\nimport { TransactionListFormatter } from \"@/EBanking/Transactions/TransactionListFormatter\";\n\nexport class TransactionsColumns {\n    static columnsKey = 'EBanking.Transactions';\n}\n\n[TransactionType, TransactionListFormatter]; // referenced types", "\uFEFFimport { TransactionType } from \"./Transactions.TransactionType\";\nimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface TransactionsRow {\n    TransactionId?: number;\n    Amount?: number;\n    TransactionType?: TransactionType;\n    TransactionDate?: string;\n    Description?: string;\n    SenderAccountId?: number;\n    ReceiverAccountId?: number;\n}\n\nexport abstract class TransactionsRow {\n    static readonly idProperty = 'TransactionId';\n    static readonly nameProperty = 'Description';\n    static readonly localTextPrefix = 'EBanking.Transactions';\n    static readonly deletePermission = 'EBanking:Transactions';\n    static readonly insertPermission = 'EBanking:Transactions';\n    static readonly readPermission = 'EBanking:Transactions';\n    static readonly updatePermission = 'EBanking:Transactions';\n\n    static readonly Fields = fieldsProxy<TransactionsRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { TransactionsRow } from \"./TransactionsRow\";\n\nexport namespace TransactionsService {\n    export const baseUrl = 'EBanking/Transactions';\n\n    export declare function Create(request: SaveRequest<TransactionsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<TransactionsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<TransactionsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"EBanking/Transactions/Create\",\n        Retrieve: \"EBanking/Transactions/Retrieve\",\n        List: \"EBanking/Transactions/List\"\n    } as const;\n\n    [\n        'Create', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>TransactionsService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { BooleanEditor, DecimalEditor, EnumEditor, DateEditor, LookupEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { AccountType } from \"./Accounts.AccountType\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface AccountsForm {\n    IsActive: BooleanEditor;\n    Balance: DecimalEditor;\n    AccountType: EnumEditor;\n    OpenDate: DateEditor;\n    CustomerId: LookupEditor;\n}\n\nexport class AccountsForm extends PrefixedContext {\n    static formKey = 'EBanking.Accounts';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!AccountsForm.init)  {\n            AccountsForm.init = true;\n\n            var w0 = BooleanEditor;\n            var w1 = DecimalEditor;\n            var w2 = EnumEditor;\n            var w3 = DateEditor;\n            var w4 = LookupEditor;\n\n            initFormType(AccountsForm, [\n                'IsActive', w0,\n                'Balance', w1,\n                'AccountType', w2,\n                'OpenDate', w3,\n                'CustomerId', w4\n            ]);\n        }\n    }\n}\n\n[AccountType]; // referenced types", "\uFEFFimport { DecimalEditor, EnumEditor, DateEditor, TextAreaEditor, LookupEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { TransactionType } from \"./Transactions.TransactionType\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface TransactionsForm {\n    Amount: DecimalEditor;\n    TransactionType: EnumEditor;\n    TransactionDate: DateEditor;\n    Description: TextAreaEditor;\n    SenderAccountId: LookupEditor;\n    ReceiverAccountId: LookupEditor;\n}\n\nexport class TransactionsForm extends PrefixedContext {\n    static formKey = 'EBanking.Transactions';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!TransactionsForm.init)  {\n            TransactionsForm.init = true;\n\n            var w0 = DecimalEditor;\n            var w1 = EnumEditor;\n            var w2 = DateEditor;\n            var w3 = TextAreaEditor;\n            var w4 = LookupEditor;\n\n            initFormType(TransactionsForm, [\n                'Amount', w0,\n                'TransactionType', w1,\n                'TransactionDate', w2,\n                'Description', w3,\n                'SenderAccountId', w4,\n                'ReceiverAccountId', w4\n            ]);\n        }\n    }\n}\n\n[TransactionType]; // referenced types"],
  "mappings": "uGAAC,IAAAA,EAA2B,SAEhBC,OACRA,IAAA,QAAU,GAAV,UACAA,IAAA,SAAW,GAAX,WACAA,IAAA,WAAa,GAAb,aACAA,IAAA,KAAO,GAAP,OAJQA,OAAA,IAMZ,aAAW,iBAAiBA,EAAa,6CAA8C,sBAAsB,ECNtG,IAAMC,EAAN,KAAsB,CAE7B,EAFaC,EAAAD,EAAA,mBAAAA,EACF,WAAa,oBCFxB,IAAAE,EAA4B,SAYrB,IAAeC,EAAf,KAA2B,CASlC,EATsBC,EAAAD,EAAA,eAAAA,EACF,WAAa,YADXA,EAEF,gBAAkB,oBAFhBA,EAGF,iBAAmB,oBAHjBA,EAIF,iBAAmB,oBAJjBA,EAKF,eAAiB,oBALfA,EAMF,iBAAmB,oBANjBA,EAQF,UAAS,eAAyB,ECrBrD,IAAAE,EAAwI,SAGxHC,OACAA,EAAA,QAAU,oBAMVA,EAAA,QAAU,CACnB,OAAQ,2BACR,SAAU,6BACV,KAAM,wBACV,EAEA,CACI,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAiBC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CAC3C,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IArBYJ,MAAA,KCHT,IAAUK,OACDA,EAAA,SAAW,0BACXA,EAAA,SAAW,oBACXA,EAAA,aAAe,0BAHdA,MAAA,KCAjB,IAAAC,EAA2B,SAEhBC,OACRA,IAAA,QAAU,GAAV,UACAA,IAAA,WAAa,GAAb,aACAA,IAAA,SAAW,GAAX,WAHQA,OAAA,IAKZ,aAAW,iBAAiBA,EAAiB,qDAAsD,0BAA0B,ECP7H,IAAAC,EAAsC,SACtCC,EAA2B,SAMpB,IAAMC,EAAN,KAAoD,CACvD,OAAOC,EAAuB,CARlC,IAAAC,EASQ,IAAIC,EAAKF,EAAI,MACb,GAAI,CAACE,EACD,MAAO,GAGX,IAAIC,IADOF,EAAAG,EAAQ,UAAU,IAAlB,YAAAH,EAAqB,UACnBC,CAAE,EACf,OAAKC,KAEE,cAAWA,EAAE,QAAQ,EADjBD,EAAG,SAAS,CAE3B,CACJ,EAZaG,EAAAN,EAAA,4BAAAA,EAANO,EAAA,CADN,aAAW,kBAAkB,gDAAgD,GACjEP,GCJN,IAAMQ,EAAN,KAA0B,CAEjC,EAFaC,EAAAD,EAAA,uBAAAA,EACF,WAAa,wBCHxB,IAAAE,EAA4B,SAYrB,IAAeC,EAAf,KAA+B,CAUtC,EAVsBC,EAAAD,EAAA,mBAAAA,EACF,WAAa,gBADXA,EAEF,aAAe,cAFbA,EAGF,gBAAkB,wBAHhBA,EAIF,iBAAmB,wBAJjBA,EAKF,iBAAmB,wBALjBA,EAMF,eAAiB,wBANfA,EAOF,iBAAmB,wBAPjBA,EASF,UAAS,eAA6B,ECtBzD,IAAAE,EAAwI,SAGxHC,OACAA,EAAA,QAAU,wBAMVA,EAAA,QAAU,CACnB,OAAQ,+BACR,SAAU,iCACV,KAAM,4BACV,EAEA,CACI,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAqBC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CAC/C,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IArBYJ,MAAA,KCHhB,IAAAK,EAAoG,SAErG,IAAAC,EAA6B,SAUtB,IAAMC,EAAN,cAA2B,iBAAgB,CAI9C,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAa,KAAO,CACrBA,EAAa,KAAO,GAEpB,IAAIE,EAAK,gBACLC,EAAK,gBACLC,EAAK,aACLC,EAAK,aACLC,EAAK,kBAET,gBAAaN,EAAc,CACvB,WAAYE,EACZ,UAAWC,EACX,cAAeC,EACf,WAAYC,EACZ,aAAcC,CAClB,CAAC,CACL,CACJ,CACJ,EAzBaC,EAANP,EAAMQ,EAAAD,EAAA,gBAAAA,EACF,QAAU,oBCbpB,IAAAE,EAAqG,SAEtG,IAAAC,EAA6B,SAWtB,IAAMC,EAAN,cAA+B,iBAAgB,CAIlD,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAiB,KAAO,CACzBA,EAAiB,KAAO,GAExB,IAAIE,EAAK,gBACLC,EAAK,aACLC,EAAK,aACLC,EAAK,iBACLC,EAAK,kBAET,gBAAaN,EAAkB,CAC3B,SAAUE,EACV,kBAAmBC,EACnB,kBAAmBC,EACnB,cAAeC,EACf,kBAAmBC,EACnB,oBAAqBA,CACzB,CAAC,CACL,CACJ,CACJ,EA1BaC,EAANP,EAAMQ,EAAAD,EAAA,oBAAAA,EACF,QAAU",
  "names": ["import_corelib", "AccountType", "AccountsColumns", "__name", "import_q", "AccountsRow", "__name", "import_q", "AccountsService", "x", "r", "s", "o", "PermissionKeys", "import_corelib", "TransactionType", "import_corelib", "import_q", "TransactionListFormatter", "ctx", "_a", "id", "g", "UserRow", "__name", "__decorateClass", "TransactionsColumns", "__name", "import_q", "TransactionsRow", "__name", "import_q", "TransactionsService", "x", "r", "s", "o", "import_corelib", "import_q", "_AccountsForm", "prefix", "w0", "w1", "w2", "w3", "w4", "AccountsForm", "__name", "import_corelib", "import_q", "_TransactionsForm", "prefix", "w0", "w1", "w2", "w3", "w4", "TransactionsForm", "__name"]
}
